#!/bin/bash
# laravel-mysql-import
# prepared by dicky@bitzen19.com
# last update: May 6th, 2021

if ! mysql --version > /dev/null 2>&1; then
  echo ""
  echo "mysql is not installed."
  echo "Please install mysql (at least client) before running this script."
  echo ""
  exit
fi

if ! which unzip > /dev/null 2>&1; then
  echo ""
  echo "unzip is not installed."
  echo "Please install unzip before running this script."
  echo ""
  exit
fi

SOURCE_DIR=$(dirname "$0")

# default project folder
PROJECT_ROOT_FOLDER=/var/www/html

if [ ! -d "$PROJECT_ROOT_FOLDER" ]; then
  PROJECT_ROOT_FOLDER=/var/www
fi

# overwrite PROJECT_ROOT_FOLDER from file "laravel-setting.env" at the same folder if exists
if [ -f "$SOURCE_DIR/laravel-setting.env" ]; then
  . "$SOURCE_DIR/laravel-setting.env"
fi

if [ ! -d "$PROJECT_ROOT_FOLDER" ]; then
  echo ""
  echo "Can not find project root folder: $PROJECT_ROOT_FOLDER"
  if [ ! -f "$SOURCE_DIR/laravel-setting.env" ]; then
    echo ""
    echo "The defaut project root folder is: $PROJECT_ROOT_FOLDER"
    echo "if you want to change defaut project root folder, do the following:"
    echo "1. create file: $SOURCE_DIR/laravel-setting.env"
    echo "2. add line:"
    echo "   PROJECT_ROOT_FOLDER=[ your project root ]"
    echo "3. Save the file."
    echo "4. Re-run this script"
  fi
  echo ""
  exit
fi

PROJECT_DIRS_COUNT=$(find "$PROJECT_ROOT_FOLDER" -mindepth 1 -maxdepth 1 -type d | wc -l)
if [ $PROJECT_DIRS_COUNT -eq 0 ]; then
  echo ""
  echo "No subfolder found under project root folder:"
  echo "$PROJECT_ROOT_FOLDER"
  echo ""
  exit
fi

ENV_FILES_COUNT=$(find "$PROJECT_ROOT_FOLDER" -mindepth 2 -maxdepth 2 -type f -name .env | wc -l)

if [ $ENV_FILES_COUNT -eq 0 ]; then
  echo ""
  echo "No .env files found under project root folder:"
  echo "$PROJECT_ROOT_FOLDER"
  echo ""
  exit
fi

ENV_FILES=$(find "$PROJECT_ROOT_FOLDER" -mindepth 2 -maxdepth 2 -type f -name .env)

if [ -z "$1" ]; then
  echo ""
  echo "USAGE:"
  echo "laravel-mysql-import [project-dir] [import-data-file]"
  echo ""
  echo " *[project-dir] must be subfolder of $PROJECT_ROOT_FOLDER"
  echo "**[import-data-file] must be .sql file or zipped .sql file."
  echo ""
  echo "example(s):"

  find ${ENV_FILES} |
  while read filename
    do
      PROJECT_DIR1=$(dirname "$filename" | xargs basename)
      echo "laravel-mysql-import $PROJECT_DIR1 /path/to/myimport_data.sql"
    done

  echo ""
  exit
fi

PROJECT_DIR="$1"
if [ ! -d "$PROJECT_ROOT_FOLDER/$PROJECT_DIR" ]; then
  echo ""
  echo "Can not find project dir: "$PROJECT_ROOT_FOLDER/$PROJECT_DIR""
  echo ""
  echo "correct example(s):"

  find ${ENV_FILES} |
  while read filename
    do
      PROJECT_DIR1=$(dirname "$filename" | xargs basename)
      echo "laravel-mysql-import $PROJECT_DIR1 /path/to/myimport_data.sql"
    done
  echo ""
  exit
fi

ENV_FILE="$PROJECT_ROOT_FOLDER/$PROJECT_DIR/.env"

if [ ! -f  "$ENV_FILE" ]; then
  echo ""
  echo "Can not find laravel project .env file:"
  echo "$ENV_FILE"
  echo ""
  exit
fi

if [ "$(file -b --mime-type $ENV_FILE)" != "text/plain" ]; then
  echo ""
  echo ".env file must be in text format:"
  echo "$ENV_FILE"
  echo ""
  exit
fi

if [ -z "$2" ]; then
  echo ""
  echo "database import script file must be specified."
  echo "example(s):"
  echo "laravel-mysql-export $1 /path/to/myimport_data.sql"
  echo "laravel-mysql-export $1 /path/to/myimport_data.zip"
  echo ""
  exit
fi

if [ ! -f "$2" ]; then
  echo ""
  echo "Can not find import data file:"
  echo "$2"
  echo ""
  exit
fi

IMPORT_FILE_EXT=$(echo $2 | awk -F . '{print $NF}' | awk '{print tolower($0)}')

if [ "$IMPORT_FILE_EXT" != "sql" ] && [ "$IMPORT_FILE_EXT" != "zip" ]; then
  echo ""
  echo "Import script file extension must be .sql or .zip:"
  echo "$2"
  echo ""
  exit
fi

if [ "$IMPORT_FILE_EXT" == "zip" ]; then
  # check zip file
  rm -f /tmp/testzip.txt
  unzip -t "$2" > /tmp/testzip.txt
  if [ $? -ne 0 ]; then
    echo ""
    echo "ERROR: invalid/corrupted zip file:"
    echo "$2"
    echo ""
    rm -f /tmp/testzip.txt
    exit
  fi

  rm -f /tmp/testzip.txt

  SQL_FILE_COUNT=$(unzip -l "$2" | egrep -i '\.sql$' | wc -l)
  if [ "$SQL_FILE_COUNT" -ne 1 ]; then
    echo ""
    echo "ERROR: Wrong zip content for import sql data file:"
    echo "$2"
    echo ""
    echo "Zip file must contain PRECISELY 1 .sql file."
    echo ""
    exit
  fi

  SQL_FILE_INSIDE_ZIP=$(unzip -l "$2" | egrep -i '\.sql$' | awk -F " " '{print $NF}')

  IMPORT_SQL_FILE="/tmp/$SQL_FILE_INSIDE_ZIP"

  rm -f "$IMPORT_SQL_FILE"

  unzip -o "$2" -d /tmp
  if [ $? -ne 0 ]; then
    echo ""
    echo "ERROR: Can not unzip import data file:"
    echo "$2"
    rm -f "$IMPORT_SQL_FILE"
    echo ""
    exit
  fi

  if [ ! -f "$IMPORT_SQL_FILE" ]; then
    echo ""
    echo "ERROR: Can not find unzipped import data file:"
    echo ""
    exit
  fi
fi

if [ "$IMPORT_FILE_EXT" == "sql" ]; then
  IMPORT_SQL_FILE="$2"
fi

if [ "$(file -b --mime-type $IMPORT_SQL_FILE | egrep -i 'text' | wc -l)" -eq 0 ];  then
  echo ""
  echo ".sql file must be in text format:"
  echo "$IMPORT_SQL_FILE"
  echo ""
  exit
fi

if [ $(egrep -i '\s*drop\s+database' "$IMPORT_SQL_FILE" | wc -l) -ne 0 ]; then
  echo ""
  echo ".sql file MUST NOT contain \"DROP DATABASE ...\" statement:"
  echo "$IMPORT_SQL_FILE"
  echo ""
  exit
fi

if [ $(egrep -i '\s*create\s+table' "$IMPORT_SQL_FILE" | wc -l) -eq 0 ]; then
  echo ""
  echo ".sql file MUST contain \"CREATE TABLE ...\" statement:"
  echo "$IMPORT_SQL_FILE"
  echo ""
  exit
fi

# script started here

# ExtractEnvValue [key] [.env file]
function ExtractEnvValue() {
  if [ -z $1 ]; then
    echo ""
  else
    if [ -z $2 ]; then
      echo ""
    else
      if [ -f $2 ]; then
        echo $(sed -n "s/^$1[ ]*=//p" $2 | xargs)
      else
        echo ""
      fi
    fi
  fi
}

DB_CONNECTION=$(ExtractEnvValue DB_CONNECTION "$ENV_FILE")
if [ $DB_CONNECTION != "mysql" ]; then
  echo ""
  echo ".env file: $ENV_FILE"
  echo "DB_CONNECTION value must be: mysql"
  echo "Detected DB_CONNECTION: $DB_CONNECTION"
  echo ""
  exit
fi

DB_HOST=$(ExtractEnvValue DB_HOST "$ENV_FILE")
DB_PORT=$(ExtractEnvValue DB_PORT "$ENV_FILE")
DB_DATABASE=$(ExtractEnvValue DB_DATABASE "$ENV_FILE")
DB_USERNAME=$(ExtractEnvValue DB_USERNAME "$ENV_FILE")
DB_PASSWORD=$(ExtractEnvValue DB_PASSWORD "$ENV_FILE")

if [ -z "$DB_HOST" ]; then
  echo ""
  echo ".env file: $ENV_FILE"
  echo "DB_HOST must be set."
  echo ""
  exit
fi

if [ -z "$DB_PORT" ]; then
  echo ""
  echo ".env file: $ENV_FILE"
  echo "DB_PORT must be set."
  echo ""
  exit
fi

if [ -z "$DB_DATABASE" ]; then
  echo ""
  echo ".env file: $ENV_FILE"
  echo "DB_DATABASE must be set."
  echo ""
  exit
fi

if [ -z "$DB_USERNAME" ]; then
  echo ""
  echo ".env file: $ENV_FILE"
  echo "DB_USERNAME must be set."
  echo ""
  exit
fi

# confirmation before import
echo ""
echo "Confirmation before you import data from:"
echo "$2"
echo "to database: \"$DB_DATABASE\" at host: \"$DB_HOST\" ?"
echo "It will replace entire database."
echo ""

while true; do
  read -p "Replace entire database: $DB_DATABASE [y/n]? " YN
    if [ "$YN" == 'y' ] || [ "$YN" == 'n' ]; then
    break;
  else
    echo "Please answer y or n"
  fi
done

echo ""

if [ "$YN" == "n" ]; then
  exit
fi

# export DB_PASSWORD as MYSQL_PWD global var so mysqldump doesn't ask for pass word
export MYSQL_PWD="$DB_PASSWORD"

TIME_NOW=$(date +%Y-%m-%d_%H-%M-%s)

DROP_TABLES_SCRIPT="/tmp/DROP_TABLE_$TIME_NOW.sql"
rm -f "$DROP_TABLES_SCRIPT"

# list tables on specified database using "SHOW TABLES"
mysql -h "$DB_HOST" -u "$DB_USERNAME" --port "$DB_PORT" -e "SHOW TABLES" "$DB_DATABASE" > "$DROP_TABLES_SCRIPT"

if [ "$?" -ne 0 ]; then
  # contains error
  echo ""
  echo "Can not connect to database: \"$DB_DATABASE\" with user \"$DB_USERNAME\""
  echo ""
  rm -f "$DROP_TABLES_SCRIPT"
  exit
fi

# add "DROP TABLE IF EXIST " as prefix of each line
sed -i -e 's/^/DROP TABLE IF EXISTS /' "$DROP_TABLES_SCRIPT"

# add ";" as suffix of each line
sed -i -e 's/$/;/' "$DROP_TABLES_SCRIPT"

# add SET FOREIGN_KEY_CHECKS=0; at the begining of DROP_TABLES_SCRIPT
sed -i '1s/^/SET FOREIGN_KEY_CHECKS=0;\n/' "$DROP_TABLES_SCRIPT"

# get size of DROP_TABLES_SCRIPT
if [ $(wc -c "$DROP_TABLES_SCRIPT" | awk '{print $1}') -gt 0 ]; then
  mysql -h "$DB_HOST" -u "$DB_USERNAME" --port "$DB_PORT" "$DB_DATABASE" < "$DROP_TABLES_SCRIPT"
  echo "Emptying database: $DB_DATABASE"
  echo "please wait..."

  if [ $? -ne 0 ]; then
    echo ""
    echo "ERROR: Failed to clean up database: $DB_DATABASE"
    echo ""
    # reset MYSQL_PWD global var
    export MYSQL_PWD=""
    rm -f "$DROP_TABLES_SCRIPT"
    exit
  fi

  echo ""
fi

rm -f "$DROP_TABLES_SCRIPT"

echo "Importing data from file: $IMPORT_SQL_FILE"
echo "to database: $DB_DATABASE"
echo "It will take few minutes, please wait..."

mysql -h "$DB_HOST" -u "$DB_USERNAME" --port "$DB_PORT" "$DB_DATABASE" < "$IMPORT_SQL_FILE"

if [ $? -ne 0 ]; then
  echo ""
  echo "ERROR: Failed to import file: $IMPORT_SQL_FILE to database: $DB_DATABASE"
  echo ""
  # reset MYSQL_PWD global var
  export MYSQL_PWD=""
  exit
fi

# reset MYSQL_PWD global var
export MYSQL_PWD=""

echo "Done importing data."
echo ""
